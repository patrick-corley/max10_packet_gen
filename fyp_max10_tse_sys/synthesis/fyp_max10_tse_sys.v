// fyp_max10_tse_sys.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module fyp_max10_tse_sys (
		input  wire        clk_sys_125_clk,                             //                           clk_sys_125.clk
		output wire        eth_tse_0_mac_mdio_connection_mdc,           //         eth_tse_0_mac_mdio_connection.mdc
		input  wire        eth_tse_0_mac_mdio_connection_mdio_in,       //                                      .mdio_in
		output wire        eth_tse_0_mac_mdio_connection_mdio_out,      //                                      .mdio_out
		output wire        eth_tse_0_mac_mdio_connection_mdio_oen,      //                                      .mdio_oen
		input  wire        eth_tse_0_mac_misc_connection_xon_gen,       //         eth_tse_0_mac_misc_connection.xon_gen
		input  wire        eth_tse_0_mac_misc_connection_xoff_gen,      //                                      .xoff_gen
		output wire        eth_tse_0_mac_misc_connection_magic_wakeup,  //                                      .magic_wakeup
		input  wire        eth_tse_0_mac_misc_connection_magic_sleep_n, //                                      .magic_sleep_n
		input  wire        eth_tse_0_mac_misc_connection_ff_tx_crc_fwd, //                                      .ff_tx_crc_fwd
		output wire        eth_tse_0_mac_misc_connection_ff_tx_septy,   //                                      .ff_tx_septy
		output wire        eth_tse_0_mac_misc_connection_tx_ff_uflow,   //                                      .tx_ff_uflow
		output wire        eth_tse_0_mac_misc_connection_ff_tx_a_full,  //                                      .ff_tx_a_full
		output wire        eth_tse_0_mac_misc_connection_ff_tx_a_empty, //                                      .ff_tx_a_empty
		output wire [17:0] eth_tse_0_mac_misc_connection_rx_err_stat,   //                                      .rx_err_stat
		output wire [3:0]  eth_tse_0_mac_misc_connection_rx_frm_type,   //                                      .rx_frm_type
		output wire        eth_tse_0_mac_misc_connection_ff_rx_dsav,    //                                      .ff_rx_dsav
		output wire        eth_tse_0_mac_misc_connection_ff_rx_a_full,  //                                      .ff_rx_a_full
		output wire        eth_tse_0_mac_misc_connection_ff_rx_a_empty, //                                      .ff_rx_a_empty
		input  wire [3:0]  eth_tse_0_mac_rgmii_connection_rgmii_in,     //        eth_tse_0_mac_rgmii_connection.rgmii_in
		output wire [3:0]  eth_tse_0_mac_rgmii_connection_rgmii_out,    //                                      .rgmii_out
		input  wire        eth_tse_0_mac_rgmii_connection_rx_control,   //                                      .rx_control
		output wire        eth_tse_0_mac_rgmii_connection_tx_control,   //                                      .tx_control
		input  wire        eth_tse_0_mac_status_connection_set_10,      //       eth_tse_0_mac_status_connection.set_10
		input  wire        eth_tse_0_mac_status_connection_set_1000,    //                                      .set_1000
		output wire        eth_tse_0_mac_status_connection_eth_mode,    //                                      .eth_mode
		output wire        eth_tse_0_mac_status_connection_ena_10,      //                                      .ena_10
		input  wire        eth_tse_0_pcs_mac_rx_clock_connection_clk,   // eth_tse_0_pcs_mac_rx_clock_connection.clk
		input  wire        eth_tse_0_pcs_mac_tx_clock_connection_clk,   // eth_tse_0_pcs_mac_tx_clock_connection.clk
		output wire [31:0] eth_tse_0_receive_data,                      //                     eth_tse_0_receive.data
		output wire        eth_tse_0_receive_endofpacket,               //                                      .endofpacket
		output wire [5:0]  eth_tse_0_receive_error,                     //                                      .error
		output wire [1:0]  eth_tse_0_receive_empty,                     //                                      .empty
		input  wire        eth_tse_0_receive_ready,                     //                                      .ready
		output wire        eth_tse_0_receive_startofpacket,             //                                      .startofpacket
		output wire        eth_tse_0_receive_valid,                     //                                      .valid
		input  wire        eth_tse_0_receive_clock_connection_clk,      //    eth_tse_0_receive_clock_connection.clk
		input  wire [31:0] eth_tse_0_transmit_data,                     //                    eth_tse_0_transmit.data
		input  wire        eth_tse_0_transmit_endofpacket,              //                                      .endofpacket
		input  wire        eth_tse_0_transmit_error,                    //                                      .error
		input  wire [1:0]  eth_tse_0_transmit_empty,                    //                                      .empty
		output wire        eth_tse_0_transmit_ready,                    //                                      .ready
		input  wire        eth_tse_0_transmit_startofpacket,            //                                      .startofpacket
		input  wire        eth_tse_0_transmit_valid,                    //                                      .valid
		input  wire        eth_tse_0_transmit_clock_connection_clk,     //   eth_tse_0_transmit_clock_connection.clk
		input  wire        reset_sys_125_reset_n                        //                         reset_sys_125.reset_n
	);

	wire  [31:0] master_0_master_readdata;                             // mm_interconnect_0:master_0_master_readdata -> master_0:master_readdata
	wire         master_0_master_waitrequest;                          // mm_interconnect_0:master_0_master_waitrequest -> master_0:master_waitrequest
	wire  [31:0] master_0_master_address;                              // master_0:master_address -> mm_interconnect_0:master_0_master_address
	wire         master_0_master_read;                                 // master_0:master_read -> mm_interconnect_0:master_0_master_read
	wire   [3:0] master_0_master_byteenable;                           // master_0:master_byteenable -> mm_interconnect_0:master_0_master_byteenable
	wire         master_0_master_readdatavalid;                        // mm_interconnect_0:master_0_master_readdatavalid -> master_0:master_readdatavalid
	wire         master_0_master_write;                                // master_0:master_write -> mm_interconnect_0:master_0_master_write
	wire  [31:0] master_0_master_writedata;                            // master_0:master_writedata -> mm_interconnect_0:master_0_master_writedata
	wire  [31:0] mm_interconnect_0_eth_tse_0_control_port_readdata;    // eth_tse_0:reg_data_out -> mm_interconnect_0:eth_tse_0_control_port_readdata
	wire         mm_interconnect_0_eth_tse_0_control_port_waitrequest; // eth_tse_0:reg_busy -> mm_interconnect_0:eth_tse_0_control_port_waitrequest
	wire   [7:0] mm_interconnect_0_eth_tse_0_control_port_address;     // mm_interconnect_0:eth_tse_0_control_port_address -> eth_tse_0:reg_addr
	wire         mm_interconnect_0_eth_tse_0_control_port_read;        // mm_interconnect_0:eth_tse_0_control_port_read -> eth_tse_0:reg_rd
	wire         mm_interconnect_0_eth_tse_0_control_port_write;       // mm_interconnect_0:eth_tse_0_control_port_write -> eth_tse_0:reg_wr
	wire  [31:0] mm_interconnect_0_eth_tse_0_control_port_writedata;   // mm_interconnect_0:eth_tse_0_control_port_writedata -> eth_tse_0:reg_data_in
	wire         rst_controller_reset_out_reset;                       // rst_controller:reset_out -> [eth_tse_0:reset, jtag_uart_0:rst_n, mm_interconnect_0:eth_tse_0_reset_connection_reset_bridge_in_reset_reset, mm_interconnect_0:master_0_clk_reset_reset_bridge_in_reset_reset]

	fyp_max10_tse_sys_eth_tse_0 eth_tse_0 (
		.clk           (clk_sys_125_clk),                                      // control_port_clock_connection.clk
		.reset         (rst_controller_reset_out_reset),                       //              reset_connection.reset
		.reg_addr      (mm_interconnect_0_eth_tse_0_control_port_address),     //                  control_port.address
		.reg_data_out  (mm_interconnect_0_eth_tse_0_control_port_readdata),    //                              .readdata
		.reg_rd        (mm_interconnect_0_eth_tse_0_control_port_read),        //                              .read
		.reg_data_in   (mm_interconnect_0_eth_tse_0_control_port_writedata),   //                              .writedata
		.reg_wr        (mm_interconnect_0_eth_tse_0_control_port_write),       //                              .write
		.reg_busy      (mm_interconnect_0_eth_tse_0_control_port_waitrequest), //                              .waitrequest
		.tx_clk        (eth_tse_0_pcs_mac_tx_clock_connection_clk),            //   pcs_mac_tx_clock_connection.clk
		.rx_clk        (eth_tse_0_pcs_mac_rx_clock_connection_clk),            //   pcs_mac_rx_clock_connection.clk
		.set_10        (eth_tse_0_mac_status_connection_set_10),               //         mac_status_connection.set_10
		.set_1000      (eth_tse_0_mac_status_connection_set_1000),             //                              .set_1000
		.eth_mode      (eth_tse_0_mac_status_connection_eth_mode),             //                              .eth_mode
		.ena_10        (eth_tse_0_mac_status_connection_ena_10),               //                              .ena_10
		.rgmii_in      (eth_tse_0_mac_rgmii_connection_rgmii_in),              //          mac_rgmii_connection.rgmii_in
		.rgmii_out     (eth_tse_0_mac_rgmii_connection_rgmii_out),             //                              .rgmii_out
		.rx_control    (eth_tse_0_mac_rgmii_connection_rx_control),            //                              .rx_control
		.tx_control    (eth_tse_0_mac_rgmii_connection_tx_control),            //                              .tx_control
		.ff_rx_clk     (eth_tse_0_receive_clock_connection_clk),               //      receive_clock_connection.clk
		.ff_tx_clk     (eth_tse_0_transmit_clock_connection_clk),              //     transmit_clock_connection.clk
		.ff_rx_data    (eth_tse_0_receive_data),                               //                       receive.data
		.ff_rx_eop     (eth_tse_0_receive_endofpacket),                        //                              .endofpacket
		.rx_err        (eth_tse_0_receive_error),                              //                              .error
		.ff_rx_mod     (eth_tse_0_receive_empty),                              //                              .empty
		.ff_rx_rdy     (eth_tse_0_receive_ready),                              //                              .ready
		.ff_rx_sop     (eth_tse_0_receive_startofpacket),                      //                              .startofpacket
		.ff_rx_dval    (eth_tse_0_receive_valid),                              //                              .valid
		.ff_tx_data    (eth_tse_0_transmit_data),                              //                      transmit.data
		.ff_tx_eop     (eth_tse_0_transmit_endofpacket),                       //                              .endofpacket
		.ff_tx_err     (eth_tse_0_transmit_error),                             //                              .error
		.ff_tx_mod     (eth_tse_0_transmit_empty),                             //                              .empty
		.ff_tx_rdy     (eth_tse_0_transmit_ready),                             //                              .ready
		.ff_tx_sop     (eth_tse_0_transmit_startofpacket),                     //                              .startofpacket
		.ff_tx_wren    (eth_tse_0_transmit_valid),                             //                              .valid
		.mdc           (eth_tse_0_mac_mdio_connection_mdc),                    //           mac_mdio_connection.mdc
		.mdio_in       (eth_tse_0_mac_mdio_connection_mdio_in),                //                              .mdio_in
		.mdio_out      (eth_tse_0_mac_mdio_connection_mdio_out),               //                              .mdio_out
		.mdio_oen      (eth_tse_0_mac_mdio_connection_mdio_oen),               //                              .mdio_oen
		.xon_gen       (eth_tse_0_mac_misc_connection_xon_gen),                //           mac_misc_connection.xon_gen
		.xoff_gen      (eth_tse_0_mac_misc_connection_xoff_gen),               //                              .xoff_gen
		.magic_wakeup  (eth_tse_0_mac_misc_connection_magic_wakeup),           //                              .magic_wakeup
		.magic_sleep_n (eth_tse_0_mac_misc_connection_magic_sleep_n),          //                              .magic_sleep_n
		.ff_tx_crc_fwd (eth_tse_0_mac_misc_connection_ff_tx_crc_fwd),          //                              .ff_tx_crc_fwd
		.ff_tx_septy   (eth_tse_0_mac_misc_connection_ff_tx_septy),            //                              .ff_tx_septy
		.tx_ff_uflow   (eth_tse_0_mac_misc_connection_tx_ff_uflow),            //                              .tx_ff_uflow
		.ff_tx_a_full  (eth_tse_0_mac_misc_connection_ff_tx_a_full),           //                              .ff_tx_a_full
		.ff_tx_a_empty (eth_tse_0_mac_misc_connection_ff_tx_a_empty),          //                              .ff_tx_a_empty
		.rx_err_stat   (eth_tse_0_mac_misc_connection_rx_err_stat),            //                              .rx_err_stat
		.rx_frm_type   (eth_tse_0_mac_misc_connection_rx_frm_type),            //                              .rx_frm_type
		.ff_rx_dsav    (eth_tse_0_mac_misc_connection_ff_rx_dsav),             //                              .ff_rx_dsav
		.ff_rx_a_full  (eth_tse_0_mac_misc_connection_ff_rx_a_full),           //                              .ff_rx_a_full
		.ff_rx_a_empty (eth_tse_0_mac_misc_connection_ff_rx_a_empty)           //                              .ff_rx_a_empty
	);

	fyp_max10_tse_sys_jtag_uart_0 jtag_uart_0 (
		.clk            (clk_sys_125_clk),                 //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset), //             reset.reset_n
		.av_chipselect  (),                                // avalon_jtag_slave.chipselect
		.av_address     (),                                //                  .address
		.av_read_n      (),                                //                  .read_n
		.av_readdata    (),                                //                  .readdata
		.av_write_n     (),                                //                  .write_n
		.av_writedata   (),                                //                  .writedata
		.av_waitrequest (),                                //                  .waitrequest
		.av_irq         ()                                 //               irq.irq
	);

	fyp_max10_tse_sys_master_0 #(
		.USE_PLI     (0),
		.PLI_PORT    (50000),
		.FIFO_DEPTHS (2)
	) master_0 (
		.clk_clk              (clk_sys_125_clk),               //          clk.clk
		.clk_reset_reset      (~reset_sys_125_reset_n),        //    clk_reset.reset
		.master_address       (master_0_master_address),       //       master.address
		.master_readdata      (master_0_master_readdata),      //             .readdata
		.master_read          (master_0_master_read),          //             .read
		.master_write         (master_0_master_write),         //             .write
		.master_writedata     (master_0_master_writedata),     //             .writedata
		.master_waitrequest   (master_0_master_waitrequest),   //             .waitrequest
		.master_readdatavalid (master_0_master_readdatavalid), //             .readdatavalid
		.master_byteenable    (master_0_master_byteenable),    //             .byteenable
		.master_reset_reset   ()                               // master_reset.reset
	);

	fyp_max10_tse_sys_mm_interconnect_0 mm_interconnect_0 (
		.clk_125_clk_clk                                        (clk_sys_125_clk),                                      //                                      clk_125_clk.clk
		.eth_tse_0_reset_connection_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                       // eth_tse_0_reset_connection_reset_bridge_in_reset.reset
		.master_0_clk_reset_reset_bridge_in_reset_reset         (rst_controller_reset_out_reset),                       //         master_0_clk_reset_reset_bridge_in_reset.reset
		.master_0_master_address                                (master_0_master_address),                              //                                  master_0_master.address
		.master_0_master_waitrequest                            (master_0_master_waitrequest),                          //                                                 .waitrequest
		.master_0_master_byteenable                             (master_0_master_byteenable),                           //                                                 .byteenable
		.master_0_master_read                                   (master_0_master_read),                                 //                                                 .read
		.master_0_master_readdata                               (master_0_master_readdata),                             //                                                 .readdata
		.master_0_master_readdatavalid                          (master_0_master_readdatavalid),                        //                                                 .readdatavalid
		.master_0_master_write                                  (master_0_master_write),                                //                                                 .write
		.master_0_master_writedata                              (master_0_master_writedata),                            //                                                 .writedata
		.eth_tse_0_control_port_address                         (mm_interconnect_0_eth_tse_0_control_port_address),     //                           eth_tse_0_control_port.address
		.eth_tse_0_control_port_write                           (mm_interconnect_0_eth_tse_0_control_port_write),       //                                                 .write
		.eth_tse_0_control_port_read                            (mm_interconnect_0_eth_tse_0_control_port_read),        //                                                 .read
		.eth_tse_0_control_port_readdata                        (mm_interconnect_0_eth_tse_0_control_port_readdata),    //                                                 .readdata
		.eth_tse_0_control_port_writedata                       (mm_interconnect_0_eth_tse_0_control_port_writedata),   //                                                 .writedata
		.eth_tse_0_control_port_waitrequest                     (mm_interconnect_0_eth_tse_0_control_port_waitrequest)  //                                                 .waitrequest
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_sys_125_reset_n),         // reset_in0.reset
		.clk            (clk_sys_125_clk),                //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

endmodule
